//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ETradingEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ETradingEntities : DbContext
    {
        public ETradingEntities()
            : base("name=ETradingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<BusinessOwner> BusinessOwners { get; set; }
        public virtual DbSet<CategoryDetail> CategoryDetails { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
    
        public virtual ObjectResult<GetCustomersAccordingToCompany_Result> GetCustomersAccordingToCompany(Nullable<short> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomersAccordingToCompany_Result>("GetCustomersAccordingToCompany", companyIdParameter);
        }
    
        public virtual int proc_AdminLogin(string email, string password, ObjectParameter val)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AdminLogin", emailParameter, passwordParameter, val);
        }
    
        public virtual int proc_BusinessOwnerLogin(string ownerEmail, string companyPassCode, ObjectParameter val)
        {
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var companyPassCodeParameter = companyPassCode != null ?
                new ObjectParameter("CompanyPassCode", companyPassCode) :
                new ObjectParameter("CompanyPassCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BusinessOwnerLogin", ownerEmailParameter, companyPassCodeParameter, val);
        }
    
        public virtual int proc_buyShares(Nullable<short> companyId, Nullable<int> shareQuantity, string email, ObjectParameter status)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(short));
    
            var shareQuantityParameter = shareQuantity.HasValue ?
                new ObjectParameter("shareQuantity", shareQuantity) :
                new ObjectParameter("shareQuantity", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_buyShares", companyIdParameter, shareQuantityParameter, emailParameter, status);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proc_Checkbalance_Customer(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proc_Checkbalance_Customer", emailParameter);
        }
    
        public virtual ObjectResult<proc_CheckSharePrice_Result> proc_CheckSharePrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CheckSharePrice_Result>("proc_CheckSharePrice");
        }
    
        public virtual int proc_Customer_Login(string email, string password, ObjectParameter loginStatus)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Customer_Login", emailParameter, passwordParameter, loginStatus);
        }
    
        public virtual int proc_customerInsert(ObjectParameter custId, string custName, string email, string password, Nullable<System.DateTime> dOB, string phoneNumber, Nullable<decimal> accountBalance, string address)
        {
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var accountBalanceParameter = accountBalance.HasValue ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_customerInsert", custId, custNameParameter, emailParameter, passwordParameter, dOBParameter, phoneNumberParameter, accountBalanceParameter, addressParameter);
        }
    
        public virtual int proc_Delete_CategoryDetails(Nullable<short> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Delete_CategoryDetails", categoryIdParameter);
        }
    
        public virtual int proc_Delete_Customer(string customerId)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Delete_Customer", customerIdParameter);
        }
    
        public virtual int proc_Delete_Owner(Nullable<short> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Delete_Owner", companyIdParameter);
        }
    
        public virtual ObjectResult<proc_displayTransactionDetails_Result> proc_displayTransactionDetails(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_displayTransactionDetails_Result>("proc_displayTransactionDetails", emailParameter);
        }
    
        public virtual ObjectResult<proc_GetAllCategoryDetails_Result> proc_GetAllCategoryDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetAllCategoryDetails_Result>("proc_GetAllCategoryDetails");
        }
    
        public virtual ObjectResult<proc_GetOwnerDetails_Result> proc_GetOwnerDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetOwnerDetails_Result>("proc_GetOwnerDetails");
        }
    
        public virtual int proc_Insert_Category(ObjectParameter categoryId, string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Insert_Category", categoryId, categoryNameParameter);
        }
    
        public virtual int proc_Insert_Owner(ObjectParameter companyId, string ownerEmail, string companyPasscode, string companyName, string ownerName, Nullable<System.DateTime> dateOfIncorporation, string phoneNumber, Nullable<short> categoryId, string companyAddress, Nullable<int> sharePrice, Nullable<short> noOfShares)
        {
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var companyPasscodeParameter = companyPasscode != null ?
                new ObjectParameter("CompanyPasscode", companyPasscode) :
                new ObjectParameter("CompanyPasscode", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var dateOfIncorporationParameter = dateOfIncorporation.HasValue ?
                new ObjectParameter("DateOfIncorporation", dateOfIncorporation) :
                new ObjectParameter("DateOfIncorporation", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var sharePriceParameter = sharePrice.HasValue ?
                new ObjectParameter("SharePrice", sharePrice) :
                new ObjectParameter("SharePrice", typeof(int));
    
            var noOfSharesParameter = noOfShares.HasValue ?
                new ObjectParameter("NoOfShares", noOfShares) :
                new ObjectParameter("NoOfShares", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Insert_Owner", companyId, ownerEmailParameter, companyPasscodeParameter, companyNameParameter, ownerNameParameter, dateOfIncorporationParameter, phoneNumberParameter, categoryIdParameter, companyAddressParameter, sharePriceParameter, noOfSharesParameter);
        }
    
        public virtual ObjectResult<proc_Search_CategoryDetails_Result> proc_Search_CategoryDetails(Nullable<short> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Search_CategoryDetails_Result>("proc_Search_CategoryDetails", categoryIdParameter);
        }
    
        public virtual ObjectResult<proc_Search_Owner_Result> proc_Search_Owner(Nullable<short> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Search_Owner_Result>("proc_Search_Owner", companyIdParameter);
        }
    
        public virtual int proc_sellShares(Nullable<short> numberofshares, Nullable<short> companyId, string customerEmail, ObjectParameter val)
        {
            var numberofsharesParameter = numberofshares.HasValue ?
                new ObjectParameter("numberofshares", numberofshares) :
                new ObjectParameter("numberofshares", typeof(short));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(short));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_sellShares", numberofsharesParameter, companyIdParameter, customerEmailParameter, val);
        }
    
        public virtual int proc_Update_CategoryDetails(string categoryName, string newCategoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var newCategoryNameParameter = newCategoryName != null ?
                new ObjectParameter("NewCategoryName", newCategoryName) :
                new ObjectParameter("NewCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Update_CategoryDetails", categoryNameParameter, newCategoryNameParameter);
        }
    
        public virtual int proc_Update_Owner(Nullable<short> companyId, string companyPassCode, string ownerName, string ownerEmail, Nullable<System.DateTime> dateOfIncorporation, string phoneNumber, string companyAddress, Nullable<int> sharePrice, Nullable<short> noOfShares)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(short));
    
            var companyPassCodeParameter = companyPassCode != null ?
                new ObjectParameter("CompanyPassCode", companyPassCode) :
                new ObjectParameter("CompanyPassCode", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var dateOfIncorporationParameter = dateOfIncorporation.HasValue ?
                new ObjectParameter("DateOfIncorporation", dateOfIncorporation) :
                new ObjectParameter("DateOfIncorporation", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var sharePriceParameter = sharePrice.HasValue ?
                new ObjectParameter("SharePrice", sharePrice) :
                new ObjectParameter("SharePrice", typeof(int));
    
            var noOfSharesParameter = noOfShares.HasValue ?
                new ObjectParameter("NoOfShares", noOfShares) :
                new ObjectParameter("NoOfShares", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Update_Owner", companyIdParameter, companyPassCodeParameter, ownerNameParameter, ownerEmailParameter, dateOfIncorporationParameter, phoneNumberParameter, companyAddressParameter, sharePriceParameter, noOfSharesParameter);
        }
    
        public virtual int proc_UpdateCustomerDetails(string oldEmail, string custName, string password, string newEmail, Nullable<System.DateTime> dOB, string phoneNumber, Nullable<decimal> accountBalance, string address)
        {
            var oldEmailParameter = oldEmail != null ?
                new ObjectParameter("oldEmail", oldEmail) :
                new ObjectParameter("oldEmail", typeof(string));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var newEmailParameter = newEmail != null ?
                new ObjectParameter("newEmail", newEmail) :
                new ObjectParameter("newEmail", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            var accountBalanceParameter = accountBalance.HasValue ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateCustomerDetails", oldEmailParameter, custNameParameter, passwordParameter, newEmailParameter, dOBParameter, phoneNumberParameter, accountBalanceParameter, addressParameter);
        }
    
        public virtual ObjectResult<proc_ViewAllCustomers_Result> proc_ViewAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ViewAllCustomers_Result>("proc_ViewAllCustomers");
        }
    
        public virtual ObjectResult<proc_ViewCompanyDetails_Result> proc_ViewCompanyDetails(Nullable<short> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ViewCompanyDetails_Result>("proc_ViewCompanyDetails", companyIdParameter);
        }
    
        public virtual ObjectResult<proc_ViewDetails_Result> proc_ViewDetails(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ViewDetails_Result>("proc_ViewDetails", emailParameter);
        }
    }
}
